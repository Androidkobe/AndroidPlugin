plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 32

    defaultConfig {
        minSdk 21
        targetSdk 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'com.google.android.material:material:1.6.1'
    compileOnly project(":plugin_base")
    compileOnly project(":layout_dsl")
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}


def rSourceFilePath = ".\\src\\main\\java\\com\\sudnu\\pluginveiw\\R.java"
def kClassFilePath = ".\\build\\tmp\\kotlin-classes\\release\\"
def outPluginName = "out.apk"

project.tasks.whenTaskAdded { Task theTask ->
    if (theTask.name == 'assembleRelease') {
        theTask.dependsOn{
            def pluginApk = file(outPluginName)
            println("=======删除已有插件=============${pluginApk.delete()}")
            println("========开始构建R文件============")
            String rResource = "aapt package -f -m -J .\\src\\main\\java\\ -S .\\src\\main\\res -I D:\\androidsdk\\platforms\\android-30\\android.jar  -M .\\src\\main\\AndroidManifest.xml"
            runCommands(rResource)
            println("========生成文件============")
        }
        theTask.doLast {
            println("========打包资源文件============")
            String buildResource = "aapt package -S .\\src\\main\\res\\ -I D:\\androidsdk\\platforms\\android-30\\android.jar  -M .\\src\\main\\AndroidManifest.xml -F $outPluginName"
            runCommands(buildResource)

            println("========开始构编译R文件============")
            String buildR = "javac $rSourceFilePath -d $kClassFilePath"
            runCommands(buildR)

            println("========开始构建dex============")
           String dexOutPut = "dx --dex  --output classes.dex $kClassFilePath"
           runCommands(dexOutPut)

            String addDex = "aapt a $outPluginName "+"classes.dex"
            runCommands(addDex)

            def rfile = file(rSourceFilePath)
            println("=======删除R文件${rfile.delete()}==========")

            def dexFile = file("classes.dex")
            println("=======删除dex${dexFile.delete()}==========")

           println("========插件打包完成============")
        }
    }
}

def runCommands(String command){
    exec {
        def commands = []
        if (System.getProperty("os.name").toLowerCase().startsWith("windows")) {
            commands << 'cmd'
            commands << '/c'
        } else {
            commands << 'bash'
            commands << '/c'
        }
        commands.add(command)
        println("执行命令 " + commands)
        commandLine commands
    }
}

////dependsOn: "assembleRelease"
//task makePlugin << {
//            assembleRelease.execute()
//
//            println("========开始构编译R文件============")
//            String buildR = "javac ..\\src\\main\\com\\sudnu\\pluginview\\R.java"
//            runCommands(buildR)
//            def file = new File("out.apk")
//            if(file.exists()){
//                file.delete()
//            }
//
//            println("========打包资源文件============")
//            String buildResource = "aapt package -S .\\src\\main\\res\\ -I D:\\androidsdk\\platforms\\android-30\\android.jar  -M .\\src\\main\\AndroidManifest.xml -F out.apk"
//            runCommands(buildResource)
//
//
//           println("========开始构建dex============")
//           String dexOutPut = "dx --dex  --output .\\classes.dex .\\build\\tmp\\kotlin-classes\\release\\"
//           runCommands(dexOutPut)
//
//           String addDex = "aapt a out.apk classes.dex"
//           runCommands(addDex)
//           println("========插件打包完成============")
//}



